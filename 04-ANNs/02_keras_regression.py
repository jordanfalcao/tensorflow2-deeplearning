# -*- coding: utf-8 -*-
"""02-Keras-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qhrx6eTanTcQyA9lLtLCtchgkreqceKz

# Keras Regression Code Along Project 

Let's now apply our knowledge to a more realistic data set. Here we will also focus on feature engineering and cleaning our data!

## The Data

We will be using data from a Kaggle data set:

https://www.kaggle.com/harlfoxem/housesalesprediction

#### Feature Columns
    
* id - Unique ID for each home sold
* date - Date of the home sale
* price - Price of each home sold
* bedrooms - Number of bedrooms
* bathrooms - Number of bathrooms, where .5 accounts for a room with a toilet but no shower
* sqft_living - Square footage of the apartments interior living space
* sqft_lot - Square footage of the land space
* floors - Number of floors
* waterfront - A dummy variable for whether the apartment was overlooking the waterfront or not
* view - An index from 0 to 4 of how good the view of the property was
* condition - An index from 1 to 5 on the condition of the apartment,
* grade - An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.
* sqft_above - The square footage of the interior housing space that is above ground level
* sqft_basement - The square footage of the interior housing space that is below ground level
* yr_built - The year the house was initially built
* yr_renovated - The year of the house’s last renovation
* zipcode - What zipcode area the house is in
* lat - Lattitude
* long - Longitude
* sqft_living15 - The square footage of interior housing living space for the nearest 15 neighbors
* sqft_lot15 - The square footage of the land lots of the nearest 15 neighbors
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('kc_house_data.csv')

df.head()

"""# Exploratory Data Analysis"""

# null verification
df.isnull().sum()

# data description
df.describe().transpose()

# label histogram
plt.figure(figsize=(12,6))
plt.title('Price Histogram', fontsize=20)
plt.xlabel('Price - U$D', fontsize=16)
plt.ylabel('Count', fontsize=16)
sns.histplot(df['price']);

# bedrooms countplot
plt.figure(figsize=(12,6))
ax = sns.countplot(x = df['bedrooms'])
ax.axes.set_title("Number of bedrooms", fontsize=20)
ax.set_ylabel("Count", fontsize=16)
ax.set_xlabel("Bedrooms", fontsize=16)
plt.show()

# label histogram
plt.figure(figsize=(12,6))
ax = sns.boxplot(x = 'bedrooms', y = 'price', data = df)
ax.axes.set_title("Number of bedrooms", fontsize=20)
ax.set_ylabel("Price", fontsize=16)
ax.set_xlabel("Bedrooms", fontsize=16)
plt.show()

# correlation
df.corr()['price'].sort_values()

"""## Scatterplot with high correlation features"""

# correlation between price and interior squared footage
plt.figure(figsize=(12,6))
ax = sns.scatterplot(x = 'price', y = 'sqft_living', data = df)
ax.axes.set_title("Correlation between price and interior squared footage", fontsize=20)
ax.set_ylabel("Interior square footage", fontsize=16)
ax.set_xlabel("Price", fontsize=16)
plt.show()

# correlation between price and apartament design
plt.figure(figsize=(12,6))
ax = sns.scatterplot(y = 'price', x = 'grade', data = df)
ax.axes.set_title("Correlation between price and apartament design", fontsize=20)
ax.set_ylabel("Price", fontsize=16)
ax.set_xlabel("Design Grade", fontsize=16)
plt.show()

"""### Geographical Properties"""

# preço por longitude
plt.figure(figsize=(12,8))
sns.scatterplot(x='price',y='long',data=df)
plt.show()

# preço por latitude
plt.figure(figsize=(12,8))
sns.scatterplot(x='price',y='lat',data=df)
plt.show()

# visualizando a área com maior preço
plt.figure(figsize=(12,8))
sns.scatterplot(x='long',y='lat',data=df,hue='price')
plt.show()

"""* Observamos que a área próxima a (-122.2, 47.6) possui altos valores.

### Removing some outliers
"""

# 20 most expensives houses
df.sort_values('price', ascending=False).head(20)

# DF 1%
len(df)*(0.01)

# creating another DF without 1% most expensives houses
non_top_1_perc = df.sort_values('price', ascending=False).iloc[216:]

# visualizando a área com maior preço no DF sem 1% mais caro
plt.figure(figsize=(12,8))
sns.scatterplot(x='long',y='lat',data=non_top_1_perc,
                edgecolor = None, alpha=0.2, palette = 'RdYlGn', hue='price')
plt.show()

# waterfront houses
plt.figure(figsize = (8,5))
sns.boxplot(x='waterfront',y='price',data=df)
plt.show()

