# -*- coding: utf-8 -*-
"""02-NumPy-Indexing-and-Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kirXFulDYWc8rGbiWbU1G9js6jjqF05Q

# NumPy Indexing and Selection

In this lecture we will discuss how to select elements or groups of elements from an array.
"""

import numpy as np

arr = np.arange(0,11)

arr

"""## Bracket Indexing and Selection
The simplest way to pick one or some elements of an array looks very similar to python lists:
"""

arr[8]

# selecionando uma fração do array [x,y)
arr[1:5]

arr[:5]

# até o fim
arr[5:]

"""## Broadcasting

NumPy arrays differ from normal Python lists because of their ability to broadcast. With lists, you can only reassign parts of a list with new parts of the same size and shape. That is, if you wanted to replace the first 5 elements in a list with a new value, you would have to pass in a new 5 element list. With NumPy arrays, you can broadcast a single value across a larger set of values:
"""

arr

# alterando os 5 primeiros valores
arr[0:5] = 100

arr

# recriando
arr = np.arange(0,11)
arr

# array apenas com uma fatia do arr original
slice_of_arr = arr[0:5]

slice_of_arr

arr

# alterando valores
slice_of_arr[:] = 99

slice_of_arr

# com a biblioteca NUMPY, também altera o array original
arr

# se não quiser alterar o array original, tem que explicitar que é uma cópia
arr_copy = arr.copy()

arr_copy[:] = 100

arr_copy

# neste caso, não altera
arr

"""## Indexing a 2D array (matrices)

The general format is **arr_2d[row][col]** or **arr_2d[row,col]**. I recommend using the comma notation for clarity.
"""

# criando matriz numpy
arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))

arr_2d

arr_2d.shape

# slecionando a primeira linha
arr_2d[0:1,:]

# da mesma maneira
arr_2d[0]

arr_2d[2]

# um elemento
arr_2d[1,1]

# ou assim
arr_2d[1][1]

# uma seção da matriz
arr_2d[:2,1:]

"""## Conditional Selection

This is a very fundamental concept that will directly translate to pandas later on, make sure you understand this part!

Let's briefly go over how to use brackets for selection based off of comparison operators.
"""

arr = np.arange(1,11)
arr

# apenas os maiores que 4 
arr > 4

# array booleano
bool_arr = arr>4

# podemos usar como filtro
arr[bool_arr]

# em apenas um passo
arr[arr>2]

x = 2
arr[arr>x]