# -*- coding: utf-8 -*-
"""04-NumPy-Exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LtsEntNl76THNdXz7HDoOdix2hsiEo5K

___

<a href='http://www.pieriandata.com'><img src='../Pierian_Data_Logo.png'/></a>
___
<center><em>Copyright Pierian Data</em></center>
<center><em>For more information, visit us at <a href='http://www.pieriandata.com'>www.pieriandata.com</a></em></center>

# NumPy Exercises

Now that we've learned about NumPy let's test your knowledge. We'll start off with a few simple tasks and then you'll be asked some more complicated questions.

<div class="alert alert-danger" style="margin: 10px"><strong>IMPORTANT NOTE!</strong> Make sure you don't run the cells directly above the example output shown, <br>otherwise you will end up writing over the example output!</div>

#### 1. Import NumPy as np
"""

import numpy as np

"""#### 2. Create an array of 10 zeros """

# CODE HERE
arr_z = np.zeros(10)
arr_z

# DON'T WRITE HERE

"""#### 3. Create an array of 10 ones"""

arr_o = np.ones(10)
arr_o

# DON'T WRITE HERE

"""#### 4. Create an array of 10 fives"""

np.full(10, 5, dtype=float)

np.ones(10) * 5

# DON'T WRITE HERE

"""#### 5. Create an array of the integers from 10 to 50"""

np.linspace(10, 50, 41, dtype=int)

np.arange(10, 51, 1)

# DON'T WRITE HERE

"""#### 6. Create an array of all the even integers from 10 to 50"""

np.arange(10, 51, 2)

np.linspace(10, 50, 21, dtype=int)

# DON'T WRITE HERE

"""#### 7. Create a 3x3 matrix with values ranging from 0 to 8"""

np.arange(9).reshape(3,3)

# DON'T WRITE HERE

"""#### 8. Create a 3x3 identity matrix"""

np.eye(3)

# DON'T WRITE HERE

"""#### 9. Use NumPy to generate a random number between 0 and 1<br><br>&emsp;NOTE: Your result's value should be different from the one shown below."""

np.random.rand(1)

# DON'T WRITE HERE

"""#### 10. Use NumPy to generate an array of 25 random numbers sampled from a standard normal distribution<br><br>&emsp;&ensp;NOTE: Your result's values should be different from the ones shown below."""

np.random.randn(5,5)

# DON'T WRITE HERE

"""#### 11. Create the following matrix:"""

np.arange(0.01,1.01,0.01).reshape(10,10)

np.linspace(0.01,1,100).reshape(10,10)

# DON'T WRITE HERE

"""#### 12. Create an array of 20 linearly spaced points between 0 and 1:"""

np.linspace(0, 1, 20)

# DON'T WRITE HERE

"""## Numpy Indexing and Selection

Now you will be given a starting matrix (be sure to run the cell below!), and be asked to replicate the resulting matrix outputs:
"""

# RUN THIS CELL - THIS IS OUR STARTING MATRIX
mat = np.arange(1,26).reshape(5,5)
mat

"""#### 13. Write code that reproduces the output shown below.<br><br>&emsp;&ensp;Be careful not to run the cell immediately above the output, otherwise you won't be able to see the output any more."""

# CODE HERE
mat[2:,1:]

# DON'T WRITE HERE

"""#### 14. Write code that reproduces the output shown below."""

mat[3,4]

# DON'T WRITE HERE

"""#### 15. Write code that reproduces the output shown below."""

mat[0:3,1:2]

# DON'T WRITE HERE

"""#### 16. Write code that reproduces the output shown below."""

mat[4]

# DON'T WRITE HERE

"""#### 17. Write code that reproduces the output shown below."""

mat[3:]

# DON'T WRITE HERE

"""## NumPy Operations

#### 18. Get the sum of all the values in mat
"""

mat.sum()

# DON'T WRITE HERE

"""#### 19. Get the standard deviation of the values in mat"""

mat.std()

# DON'T WRITE HERE

"""#### 20. Get the sum of all the columns in mat"""

mat.sum(axis = 0)

# DON'T WRITE HERE

"""## Bonus Question
We worked a lot with random data with numpy, but is there a way we can insure that we always get the same random numbers? What does the seed value mean? Does it matter what the actual number is? [Click Here for a Hint](https://www.google.com/search?q=numpy+random+seed)
"""

# yes
# this seed keep the random tests with same values
np.random.seed(101)

"""# Great Job!"""