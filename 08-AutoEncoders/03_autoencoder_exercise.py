# -*- coding: utf-8 -*-
"""03-Autoencoder-Exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FecRAgdQm9Pyd1CyVCUYVW6D2Jw15ac_

# Autoencoder Exercise

## Complete the Tasks Below

**TASK: Run the imports below**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""## The Data

 In the table is the average consumption of 17 types of food in grams per person per week for every country in the UK.

The table shows some interesting variations across different food types, but overall differences aren't so notable. 

**TASK: Run the import line below to read in the data**
"""

df = pd.read_csv('UK_foods.csv',index_col='Unnamed: 0')

"""**TASK: Display the DataFrame**"""

df

"""**TASK: Transpose the DataFrame so that the columns are now the index.**"""

df.T

"""**TASK: Create a heatmap from the DataFrame. Does any country really stand out as different than the others? It should be tricky to tell just from the image. Do any two countries appear to be very similar?**"""

plt.figure(figsize=(10,8))
sns.heatmap(df)
plt.show()

"""**TASK: Run the imports necessary to build an autoencoder. Our goal will be to reduce the dimensions from 17 --> 2 and see if any countries stand out as very different.**"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD

"""**TASK: Create an encoder. In the solutions we built one that went 17 --> 8 --> 4 --> 2**"""

encoder = Sequential()

encoder.add(Dense(units=8,activation='relu',input_shape=[17]))
encoder.add(Dense(units=4,activation='relu',input_shape=[8]))
encoder.add(Dense(units=2,activation='relu',input_shape=[4]))

"""**TASK: Create a decoder. In the solutions we built one that went 2-->4-->8-->17**"""

decoder = Sequential()

decoder.add(Dense(units=4,activation='relu',input_shape=[2]))
decoder.add(Dense(units=8,activation='relu',input_shape=[4]))
decoder.add(Dense(units=17,activation='relu',input_shape=[8]))

"""**TASK: Combine the encoder and decoder to be an autoencoder and compile the model.**"""

autoencoder = Sequential([encoder,decoder])
autoencoder.compile(loss='mse', optimizer=SGD(learning_rate=1.5))

"""**TASK: Create a MinMaxScaler to scale the data. Make sure to transpose the data, since we really have 17 feature columns and only 4 rows (one per country).**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaled_data = scaler.fit_transform(df.transpose().values)

# NOTE the shape should be 17 columns by 4 rows.
scaled_data

"""**TASK: Fit the autoencoder to the scaled data for 15 epochs.**"""

autoencoder.fit(scaled_data,scaled_data,epochs=15)

"""**TASK: Run the scaled data through only the encoder and predict the reduced dimensionalty output. Note: You will most likely get different results than us due to random initialiations.**"""

encoded_data = encoder.predict(scaled_data)

encoded_data

"""**TASK: Join the encoded 2 dimensional data with the original countries index. Triple check the index order to make sure its joined correctly. There are many ways to do this with pandas.**"""

df.T.index

results = pd.DataFrame(data=encoded_data,index=df.T.index,
                      columns=['C1','C2'])

results = results.reset_index()

results

"""**TASK: Now plot out these results in a scatterplot, labeled by their respective country. You should see N. Ireland further away from the other points (but not necessarily to the left or the right, could be centered further away from the others).**"""

sns.scatterplot(x='C1',y='C2',data=results,hue='index')
plt.show()

""" Once we go back and look at the data in the table, this makes sense: the Northern Irish eat way more grams of fresh potatoes and way fewer of fresh fruits, cheese, fish and alcoholic drinks. It's a good sign that structure we've visualized reflects a big fact of real-world geography: Northern Ireland is the only of the four countries not on the island of Great Britain. (If you're confused about the differences among England, the UK and Great Britain, see: this [video](https://www.youtube.com/watch?v=rNu8XDBSn10).)"""

autoencoder.save('autoencoder_cluster_UK_food.h5')