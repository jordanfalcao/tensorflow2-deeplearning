# -*- coding: utf-8 -*-
"""02-Autoencoders-on-Image-Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EhsbYmVlBnM15XlPjMjrXgXJxhxxhoDn

# AutoEncoders on Image Data

## The Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.datasets import mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

plt.imshow(X_train[0])
plt.show()

X_train.max()

X_train = X_train/255
X_test = X_test/255

"""## Basic AutoEncoder"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten,Reshape
from tensorflow.keras.optimizers import SGD

# pixels
28*28

# dividing in half
784/2

encoder = Sequential()

encoder.add(Flatten(input_shape=[28,28]))

encoder.add(Dense(400,activation="relu"))
encoder.add(Dense(200,activation="relu"))
encoder.add(Dense(100,activation="relu"))
encoder.add(Dense(50,activation="relu"))
encoder.add(Dense(25,activation="relu"))  # 3,18% of the original size (784)

decoder = Sequential()

decoder.add(Dense(50,input_shape=[25],activation='relu'))
decoder.add(Dense(100,activation='relu'))
decoder.add(Dense(200,activation='relu'))
decoder.add(Dense(400,activation='relu'))
decoder.add(Dense(28 * 28, activation="sigmoid"))  # sigmoid - match or not to the original image (0 or 1)

decoder.add(Reshape([28, 28]))

"""'Sigmoid' as activation function at the last layer and 'binary_crossentropy' as loss fuction, because the autoencoder just care about if the image we're producing as the output going to match the original image."""

autoencoder = Sequential([encoder, decoder])

autoencoder.compile(loss="binary_crossentropy",optimizer=SGD(learning_rate=1.5),metrics=['accuracy'])

# X_train, X_train, because is semi supervised, we want to know if the input matches the output
autoencoder.fit(x=X_train, y=X_train, epochs=5, validation_data=(X_test,X_test))

passed_images = autoencoder.predict(X_test[:10])

for i in range(10):
  print('Original image:')
  plt.imshow(X_test[i])
  plt.show()
  print('Attemped reconstruction - after autoencoder:')
  plt.imshow(passed_images[i])
  plt.show()

"""# AutoEncoders for Denoising Images"""

from tensorflow.keras.layers import GaussianNoise

sample = GaussianNoise(0.2)

noisey = sample(X_test[:10],training=True)

for i in range(10):
  print('Original image:')
  plt.imshow(X_test[i])
  plt.show()
  print('Noise Version')
  plt.imshow(noisey[i])
  plt.show()

"""### Create  noise removal autoencoder and train it."""

import tensorflow as tf

# TO create the exact same noise (optional)
tf.random.set_seed(101)
np.random.seed(101)

# same encoder, just add the noise layer
encoder = Sequential()
encoder.add(Flatten(input_shape=[28,28]))

# Add noise to images before going through autoencoder
encoder.add(GaussianNoise(0.2))

encoder.add(Dense(400,activation="relu"))
encoder.add(Dense(200,activation="relu"))
encoder.add(Dense(100,activation="relu"))
encoder.add(Dense(50,activation="relu"))
encoder.add(Dense(25,activation="relu"))

decoder = Sequential()

decoder.add(Dense(50,input_shape=[25],activation='relu'))
decoder.add(Dense(100,activation='relu'))
decoder.add(Dense(200,activation='relu'))
decoder.add(Dense(400,activation='relu'))

decoder.add(Dense(28 * 28, activation="sigmoid"))
decoder.add(Reshape([28, 28]))

noise_remover = Sequential([encoder, decoder])

noise_remover.compile(loss="binary_crossentropy", optimizer='adam',metrics=['accuracy'])

noise_remover.fit(x=X_train,y=X_train, epochs=8,
                           validation_data=(X_test, X_test))

ten_noisey_images = sample(X_test[0:10],training=True)

denoised = noise_remover(ten_noisey_images[0:10])

for i in range(10):
  print("The Original")
  plt.imshow(X_test[i])
  plt.show()
  print("The Noisey Version")
  plt.imshow(ten_noisey_images[i])
  plt.show()
  print("After going through denoiser")
  plt.imshow(denoised[i])
  plt.show()

"""## Saving our models"""

autoencoder.save('autoencoder_img_model.h5')

noise_remover.save('noise_img_remover.h5')