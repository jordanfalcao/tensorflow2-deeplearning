# -*- coding: utf-8 -*-
"""01-RNN-SineWave.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZvwpFdoJRNHKdSQ2YYhXovEcgncT6qQ

# RNN Example for Sine Wave
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""## Data

Let's use Numpy to create a simple sine wave.
"""

x = np.linspace(0,50,501)

y = np.sin(x)

x

y

plt.plot(x,y)
plt.show()

df = pd.DataFrame(y, index=x, columns=['Sine'])

df.head()

"""## Train Test Split

Note! This is very different from our usual test/train split methodology!
"""

len(df)

test_percent = 0.1

len(df) * test_percent

test_point = np.round(len(df)*test_percent)

test_point

test_ind = int(len(df) - test_point)

test_ind

train = df.iloc[:test_ind]
test = df.iloc[test_ind:]

train

test

"""## Scale Data"""

from sklearn.preprocessing import MinMaxScaler

# instance
scaler = MinMaxScaler()

scaled_train = scaler.fit_transform(train)

scaled_test = scaler.transform(test)

scaled_train.max()

scaled_train.min()



"""# Time Series Generator

This class takes in a sequence of data-points gathered at
equal intervals, along with time series parameters such as
stride, length of history, etc., to produce batches for
training/validation.

#### Arguments
    data: Indexable generator (such as list or Numpy array)
        containing consecutive data points (timesteps).
        The data should be at 2D, and axis 0 is expected
        to be the time dimension.
    targets: Targets corresponding to timesteps in `data`.
        It should have same length as `data`.
    length: Length of the output sequences (in number of timesteps).
    sampling_rate: Period between successive individual timesteps
        within sequences. For rate `r`, timesteps
        `data[i]`, `data[i-r]`, ... `data[i - length]`
        are used for create a sample sequence.
    stride: Period between successive output sequences.
        For stride `s`, consecutive output samples would
        be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.
    start_index: Data points earlier than `start_index` will not be used
        in the output sequences. This is useful to reserve part of the
        data for test or validation.
    end_index: Data points later than `end_index` will not be used
        in the output sequences. This is useful to reserve part of the
        data for test or validation.
    shuffle: Whether to shuffle output samples,
        or instead draw them in chronological order.
    reverse: Boolean: if `true`, timesteps in each output sample will be
        in reverse chronological order.
    batch_size: Number of timeseries samples in each batch
        (except maybe the last one).
"""

from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

# define generator
length = 2 # Length of the output sequences (in number of timesteps)
batch_size = 1 #Number of timeseries samples in each batch

generator = TimeseriesGenerator(scaled_train, targets=scaled_train, length=length, batch_size=batch_size)

len(scaled_train)

# X - generator_length
len(generator)

generator[0]

X, y = generator[0]

print(f'Given the Array: \n{X.flatten()}')
print(f'Predict this y: \n {y}')

scaled_train[:3]

# Let's redefine to get 25 steps back and then predict the next step out
length = 50 # Length of the output sequences (in number of timesteps)
generator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=batch_size)

# 451 - 25
len(generator)

X,y = generator[0]

print(f'Given the Array: \n{X.flatten()}')
print(f'Predict this y: \n {y}')

"""### Create the Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LSTM,SimpleRNN

# We're only using one feature in our time series
n_features = 1

# define model
model = Sequential()

# Simple RNN layer
model.add(SimpleRNN(50,input_shape=(length, n_features)))

# Final Prediction
model.add(Dense(1))

model.compile(optimizer='adam', loss='mse')

model.summary()

# fit model
model.fit_generator(generator,epochs=5)

